package com.bluetoothexample;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.util.Set;
import java.util.UUID;

import com.example.tictac.LOG;


import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothSocket;

import android.util.Log;


public class bluetoothactivity {

     static String TAG = "bluetoothactivity";
     
     private static final UUID MY_UUID = UUID.fromString("00001101-0000-1000-8000-00805f9b34fb");    
     public String Discover()
	{
    	HexDump hex;
        byte[] buffer;
        buffer = new byte[1024];
        hex = new HexDump();
        
    	InputStream inp;
        OutputStream outp;
	    // Getting the Bluetooth adapter
	    BluetoothAdapter adapter = BluetoothAdapter.getDefaultAdapter();
	    BluetoothSocket sock;
	    LOG.v(TAG,"adapter: " + adapter);

	    // Check for Bluetooth support in the first place 
	    // Emulator doesn't support Bluetooth and will return null
	    if(adapter==null) { 
	      return "Bluetooth NOT supported. Aborting.";
	    }
	    
	    // Starting the device discovery
	    LOG.v(TAG,"Starting discovery...");
	    adapter.startDiscovery();
	    LOG.v(TAG,"Done with discovery...");
        
	    // Listing paired devices
	    LOG.v(TAG,"Devices Paired:");
	    Set<BluetoothDevice> devices = adapter.getBondedDevices();
	    for (BluetoothDevice device : devices) {
	    	LOG.v(TAG,"Found device: " + device);
	    	
	    	try {
	    		LOG.v(TAG,"creating rfcomm" + device);
				sock = device.createRfcommSocketToServiceRecord(MY_UUID);
				LOG.v(TAG,"created rfcomm" + device);
				LOG.v(TAG,"creating sock.connect" + device);
				sock.connect();
				LOG.v(TAG,"created sock.connect" + device);
				LOG.v(TAG,"getting input stream" + device);
				inp = sock.getInputStream();
				LOG.v(TAG,"got input stream" + device);
				LOG.v(TAG,"getting output stream" + device);
				outp = sock.getOutputStream();
				LOG.v(TAG,"got output stream" + device);
				LOG.v(TAG,"reading input stream" + device);
				inp.read(buffer);
				LOG.v(TAG,"read input stream" + device);
				LOG.v(TAG,"dumping data" + device);
                LOG.v(TAG,hex.dumpHexString(buffer));
                LOG.v(TAG,"data dumped" + device);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				LOG.v(TAG,e.getMessage());
				e.printStackTrace();
			}
	    }
	    
	    return "FoundManyDevices";
	  }	
	
}
	


