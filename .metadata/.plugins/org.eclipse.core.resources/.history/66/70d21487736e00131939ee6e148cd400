package com.bluetoothexample;

import android.app.Activity;
import android.app.IntentService;
import android.content.Intent;
import android.os.Bundle;
import android.os.IBinder;
import android.util.Log;
import com.bluetoothexample.connectStateMarshall;

public class BluetoothInbound extends IntentService {
	static final String TAG = "BluetoothInbound";

	boolean bready = false;
	public BluetoothInbound() {
		super("BluetoothInbound");
		LOG.v(TAG, ":constructed");
		bready = false;
	}

	static String RESPONSE_STRING_BARCODE;
	static String RESPONSE_STRING_NONIN;
	static String RESPONSE_STRING_MR12;
	static String RESPONSE_STRING_NOTIFIER;
	static String RESPONSE_STRING_INJECTOR;
    

	
	public BluetoothInbound(Activity theAct,String s1) {
		// TODO Auto-generated constructor stub

		super("BluetoothInbound");

		RESPONSE_STRING_INJECTOR = s1;

		LOG.v(TAG, "injector:"+ RESPONSE_STRING_INJECTOR);

		

		
		LOG.v(TAG, ":constructed");
	}



	// in and out messages
	public static final String PARAM_IN_MSG = "imsg";
	public static final String PARAM_OUT_MSG = "omsg";



	// barcode related tokens

    public static final String THEINJECTOR = "theinjecor";
	// tokens for ninon



	public static final String BLUETOOTH_NOTIFIER = "bluetooth_notifier";// notify
																					
	
	public static boolean bGotData = false;



	
	@Override
	protected void onHandleIntent(Intent intent) {

		connectStateMarshall connState = null;
		// the temptation is great but you cannot draw to the parent view in
		// this thread

		LOG.v(TAG, ":enter");
		boolean bRes = false;
		if (intent == null) {
			LOG.v(TAG, "onHandleIntent:null intent is passed");
			LOG.v(TAG, ":leave");
			return;
		}

		Bundle extras = intent.getExtras();
		if (extras == null) {
			LOG.v(TAG, ":no extras");
			return;
		} else {
			LOG.v(TAG, ":extras");
		}

        connState = BluetoothNotifierDevice(extras);
        if(connState!=null)
        {
        	LOG.v(TAG,"connState>"+connState.sname+"<");

        	switch(connState.iState)
        	{
        	case connectStateMarshall.CONNECTED_DEV:
        		LOG.v(TAG,"CONNECTED_DEV");
        		
        		break;
        	case connectStateMarshall.FOUND_DEV:
        	
        		LOG.v(TAG,"FOUND_DEV");
        		break;
        	case connectStateMarshall.LOST_DEV:
        		LOG.v(TAG,"LOST_DEV");
        		break;
        	case connectStateMarshall.RESTART_DEV:

        		// force restart on device
        		LOG.v(TAG,"RESTART_DEV");
        		break;
        	default:
        		LOG.v(TAG,"unknownstate");
        	}
        }




		// message inbound has ended

		// bundle all the crap together and send it out


        
		Intent broadcastIntentInjector = new Intent();
		broadcastIntentInjector.setAction(RESPONSE_STRING_INJECTOR);
		broadcastIntentInjector.addCategory(Intent.CATEGORY_DEFAULT);
		
		bRes = BlobBundle(extras, THEINJECTOR, broadcastIntentInjector);		
		
		if(connState != null)
		{
		 broadcastIntentInjector.putExtra(connectStateMarshall.myobjname, connState);
		 LOG.v(TAG, "connectStateMarshall:outbounded");
		 bRes = true;
		}
		
		if (bRes == true) {
			sendBroadcast(broadcastIntentInjector, null);
			LOG.v(TAG, "sentinjectorresponseto>" + RESPONSE_STRING_INJECTOR + "<");
		} else {
			LOG.v(TAG, "no injector or restart detected");
		}
		// end of injector stuff
		
		
		
		// now the nonin
		// post to the reciver of nonin events thread redraw form

		bRes = false;// reset we sent one response

		

		LOG.v(TAG, ":leave");
	}



	static public boolean bEven = true;

	static int iCount = (-32767);


	public int getint(int orgy, Bundle extras, String str) {
		int i = orgy;
		Object obj = extras.get(str);
		if (obj != null) {

			i = (Integer) obj;
			LOG.v(TAG, "i>" + i + "<");
		}
		return i;
	}

	public boolean getboolean(Bundle extras, String str) {
		boolean bi = false;
		Object obj = extras.get(str);
		if (obj != null) {
			int i;

			i = (Integer) obj;

			if (i != 0) {
				bi = true;
			}

		}
		return bi;
	}



	public connectStateMarshall BluetoothNotifierDevice(Bundle extras) {
		boolean bRes = false;
		connectStateMarshall connState = null;
		Object obj = extras.get(connectStateMarshall.myobjname);
		if (obj != null) {			
			// get the name of the device
            connState = (connectStateMarshall)obj;
			LOG.v(TAG, "devicereporting:" + connState.sname+";");

		}
		return connState;
	}



	@SuppressWarnings("unused")
	public boolean BlobBundle(Bundle extras, String theblb,
			Intent broadcastIntent) {
		boolean bRes = false;
		Object obj;
		obj = extras.get(theblb);

		if (obj != null) {

			byte[] b;
			LOG.v(TAG, "got a buffer of " + theblb + " data");
			b = (byte[]) obj;

			// dump the blob if it is present
			if (b != null) {
				LOG.v(TAG, "BlobBundle:buildintent");

				broadcastIntent.putExtra(theblb, b);
				bRes = true;
				 HexDump hex = new HexDump();
				 LOG.v(TAG, hex.dumpHexString(b));
			} else {
				LOG.v(TAG, "null pointer for the returned " + theblb
						+ " buffer");
			}
		}
		return bRes;
	}




}
