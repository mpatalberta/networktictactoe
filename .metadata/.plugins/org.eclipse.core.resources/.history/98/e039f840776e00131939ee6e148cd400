package com.bluetoothexample;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.app.Activity;
import android.content.Intent;
import android.util.Log;



import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import com.example.tictac.LOG;

import android.app.Activity;
import android.content.Intent;
import android.util.Log;


public class injectionneedle implements wrapperbluedev {
	public static int BUFFERSIZE = 255;
	public static String TAG = "injectionneedle";
	protected InputStream in;
	protected OutputStream out;
	protected DataInputStream dinp;
	protected Activity myact;
	int id;
	public void readfully(byte[] b) throws IOException
	{
		dinp.readFully(b);
	}
	public injectionneedle(int id)
	{
		this.id = id;
	}
	public void initprotocol() throws IOException
	{
		LOG.v(TAG,"initprotocol\r\n");
		if(this.out==null)
		{
			LOG.v(TAG,"FATAL_ERROR:out must be not be null\r\n");
		}
		else
		{
			LOG.v(TAG,"We HAVE A OUTPUTSTREM\r\n");
			byte[] bTest;
			// following is to force the injector into basic mode
			// see page 35 in the new era reference manual
			bTest = new byte[8];
			bTest[0] = 0x02;
			bTest[1] = 0x08;
			bTest[2] = 'S';
			bTest[3] = 'A';
			bTest[4] = 'F';
			bTest[5] = 0x55;
			bTest[6] = 0x43;
			bTest[7] = 0x03;
			LOG.v(TAG,"BeforeTestSAF0Send");
			this.write(bTest);
			LOG.v(TAG,"AfterTestSAF0Send");	
			
			bTest = new byte[4];
			bTest[0] = 'V';
			bTest[1] = 'E';
			bTest[2] = 'R';
			bTest[3] = 0x0d;
			LOG.v(TAG,"BeforeTestVERSend");
			this.write(bTest);
			LOG.v(TAG,"AfterTestVERSend");
		}
	}
	public int getdevid() 
	{
		return this.id;
	}
	public void set(Activity myact)
	{
		this.myact = myact;
	}
	public Activity getActivity()
	{
		return this.myact;
	}
	public void set(InputStream inp)
	{
       this.in = inp;
	}
	
	public void set(OutputStream outp)
	{
		this.out = outp;
	}
	public int getbuffersize()
	{
		return BUFFERSIZE;
	}
	
	String sname = null;
	public void set(String sname)
	{
		this.sname = sname;
	}
	public void announceme()
	{
        connectStateMarshall connState;
        connState = new connectStateMarshall();
        connState.sname = sname;
        connState.iState = connectStateMarshall.CONNECTED_DEV;
        
    	LOG.v(TAG,"announceme:start");	    	
    	Intent myi = new Intent(myact,BluetoothInbound.class);
		myi.putExtra(connectStateMarshall.myobjname,connState);	

	    myact.startService(myi);
		LOG.v(TAG,"announceme:end");		
	}
	
	public int available() throws IOException
	{
		if(id!= btemsdevices.INJECTOR)
        {
			LOG.v(TAG,"available:notforme");
			return 0;
        }		
		return in.available();
	}
	
	public void close() throws IOException
	{
		if(id!= btemsdevices.INJECTOR)
        {
			LOG.v(TAG,"close:notforme");
			return;
        }
		in.close();
	}
	
	public int read(byte[] b ) throws IOException
	{		
		
		if(id!= btemsdevices.INJECTOR)
        {
			LOG.v(TAG,"read:notforme");
			return 0;
        }
				

		int len;
		LOG.v(TAG,"reading serial port");
		len = in.read(b);
		Log.v(TAG,"lengthrecvd"+len);
	    if(b[0] == 0)
	    {
	    	LOG.v(TAG,"FATAL_ERROR:the first byte can never be zero:tossing data");
	    }
	    else
	    {
	    	// here is a trick only send the amount of data we really have.
	    	byte[] bSend;
	    	
	    	bSend = new byte[len];
	    	for(int i = 0;i<len;i++)
	    	{
	    		bSend[i] = b[i];
	    	}
	    	
	    	Intent myi = new Intent(myact,BluetoothInbound.class);

	    	myi.putExtra(BluetoothInbound.THEINJECTOR, bSend);

	    	myact.startService(myi);
	    	LOG.v(TAG,"sending intent");
	    }
	    
		return len;
	}
	public void write(byte[] b) throws IOException
	{
		// okay here is the issue 
		// the buffer is 255 bytes long but we do not want to send all the
		// data only the amount we need.
		// looks for first 0 byte and stops
		// this code will only work for basic mode communication
		byte bsend[];
		
		int iCount=0;
		HexDump hex = new HexDump();
		LOG.v(TAG,"passedarray\r\n");
		LOG.v(TAG, hex.dumpHexString(b));
		
		for(int i = 0;i<b.length;i++)
		{
		
			if(b[i]==0)
			{
				LOG.v(TAG,"Firstnonzerofound:i>"+i+"<iCount>"+iCount+"<\r\n");
				break;
			}
			iCount = iCount + 1;
		}
		
		bsend = new byte[iCount];
		
		for(int i = 0;i<bsend.length;i++)
		{
			bsend[i]= b[i];
		}
		LOG.v(TAG,"arraytobesentoverbluetooth\r\n");
		LOG.v(TAG, hex.dumpHexString(bsend));
		if(out!=null)
		{
			LOG.v(TAG,"The output socket ready and data is sent\r\n");
			out.write(bsend);
		}
		else
		{
			LOG.v(TAG,"The output socket is null no data is sent\r\n");
		}
	}

}	